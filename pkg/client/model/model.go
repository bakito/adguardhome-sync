// Package model provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package model

import (
	"encoding/json"
	"fmt"
	"time"
)

const (
	BasicAuthScopes = "basicAuth.Scopes"
)

// Defines values for CheckConfigStaticIpInfoStatic.
const (
	CheckConfigStaticIpInfoStaticError CheckConfigStaticIpInfoStatic = "error"
	CheckConfigStaticIpInfoStaticNo    CheckConfigStaticIpInfoStatic = "no"
	CheckConfigStaticIpInfoStaticYes   CheckConfigStaticIpInfoStatic = "yes"
)

// Defines values for DNSConfigBlockingMode.
const (
	CustomIp DNSConfigBlockingMode = "custom_ip"
	Default  DNSConfigBlockingMode = "default"
	NullIp   DNSConfigBlockingMode = "null_ip"
	Nxdomain DNSConfigBlockingMode = "nxdomain"
	Refused  DNSConfigBlockingMode = "refused"
)

// Defines values for DhcpSearchResultOtherServerFound.
const (
	DhcpSearchResultOtherServerFoundError DhcpSearchResultOtherServerFound = "error"
	DhcpSearchResultOtherServerFoundNo    DhcpSearchResultOtherServerFound = "no"
	DhcpSearchResultOtherServerFoundYes   DhcpSearchResultOtherServerFound = "yes"
)

// Defines values for DhcpSearchResultStaticIPStatic.
const (
	DhcpSearchResultStaticIPStaticError DhcpSearchResultStaticIPStatic = "error"
	DhcpSearchResultStaticIPStaticNo    DhcpSearchResultStaticIPStatic = "no"
	DhcpSearchResultStaticIPStaticYes   DhcpSearchResultStaticIPStatic = "yes"
)

// Defines values for FilterCheckHostResponseReason.
const (
	FilterCheckHostResponseReasonFilteredBlackList      FilterCheckHostResponseReason = "FilteredBlackList"
	FilterCheckHostResponseReasonFilteredBlockedService FilterCheckHostResponseReason = "FilteredBlockedService"
	FilterCheckHostResponseReasonFilteredInvalid        FilterCheckHostResponseReason = "FilteredInvalid"
	FilterCheckHostResponseReasonFilteredParental       FilterCheckHostResponseReason = "FilteredParental"
	FilterCheckHostResponseReasonFilteredSafeBrowsing   FilterCheckHostResponseReason = "FilteredSafeBrowsing"
	FilterCheckHostResponseReasonFilteredSafeSearch     FilterCheckHostResponseReason = "FilteredSafeSearch"
	FilterCheckHostResponseReasonNotFilteredError       FilterCheckHostResponseReason = "NotFilteredError"
	FilterCheckHostResponseReasonNotFilteredNotFound    FilterCheckHostResponseReason = "NotFilteredNotFound"
	FilterCheckHostResponseReasonNotFilteredWhiteList   FilterCheckHostResponseReason = "NotFilteredWhiteList"
	FilterCheckHostResponseReasonRewrite                FilterCheckHostResponseReason = "Rewrite"
	FilterCheckHostResponseReasonRewriteEtcHosts        FilterCheckHostResponseReason = "RewriteEtcHosts"
	FilterCheckHostResponseReasonRewriteRule            FilterCheckHostResponseReason = "RewriteRule"
)

// Defines values for ProfileInfoTheme.
const (
	Auto  ProfileInfoTheme = "auto"
	Dark  ProfileInfoTheme = "dark"
	Light ProfileInfoTheme = "light"
)

// Defines values for QueryLogConfigInterval.
const (
	QueryLogConfigIntervalN025 QueryLogConfigInterval = 0.25
	QueryLogConfigIntervalN1   QueryLogConfigInterval = 1
	QueryLogConfigIntervalN30  QueryLogConfigInterval = 30
	QueryLogConfigIntervalN7   QueryLogConfigInterval = 7
	QueryLogConfigIntervalN90  QueryLogConfigInterval = 90
)

// Defines values for QueryLogItemReason.
const (
	QueryLogItemReasonFilteredBlackList      QueryLogItemReason = "FilteredBlackList"
	QueryLogItemReasonFilteredBlockedService QueryLogItemReason = "FilteredBlockedService"
	QueryLogItemReasonFilteredInvalid        QueryLogItemReason = "FilteredInvalid"
	QueryLogItemReasonFilteredParental       QueryLogItemReason = "FilteredParental"
	QueryLogItemReasonFilteredSafeBrowsing   QueryLogItemReason = "FilteredSafeBrowsing"
	QueryLogItemReasonFilteredSafeSearch     QueryLogItemReason = "FilteredSafeSearch"
	QueryLogItemReasonNotFilteredError       QueryLogItemReason = "NotFilteredError"
	QueryLogItemReasonNotFilteredNotFound    QueryLogItemReason = "NotFilteredNotFound"
	QueryLogItemReasonNotFilteredWhiteList   QueryLogItemReason = "NotFilteredWhiteList"
	QueryLogItemReasonRewrite                QueryLogItemReason = "Rewrite"
	QueryLogItemReasonRewriteEtcHosts        QueryLogItemReason = "RewriteEtcHosts"
	QueryLogItemReasonRewriteRule            QueryLogItemReason = "RewriteRule"
)

// Defines values for StatsTimeUnits.
const (
	Days  StatsTimeUnits = "days"
	Hours StatsTimeUnits = "hours"
)

// Defines values for StatsConfigInterval.
const (
	StatsConfigIntervalN0  StatsConfigInterval = 0
	StatsConfigIntervalN1  StatsConfigInterval = 1
	StatsConfigIntervalN30 StatsConfigInterval = 30
	StatsConfigIntervalN7  StatsConfigInterval = 7
	StatsConfigIntervalN90 StatsConfigInterval = 90
)

// Defines values for TlsConfigKeyType.
const (
	ECDSA TlsConfigKeyType = "ECDSA"
	RSA   TlsConfigKeyType = "RSA"
)

// Defines values for QueryLogParamsResponseStatus.
const (
	All                 QueryLogParamsResponseStatus = "all"
	Blocked             QueryLogParamsResponseStatus = "blocked"
	BlockedParental     QueryLogParamsResponseStatus = "blocked_parental"
	BlockedSafebrowsing QueryLogParamsResponseStatus = "blocked_safebrowsing"
	Filtered            QueryLogParamsResponseStatus = "filtered"
	Processed           QueryLogParamsResponseStatus = "processed"
	Rewritten           QueryLogParamsResponseStatus = "rewritten"
	SafeSearch          QueryLogParamsResponseStatus = "safe_search"
	Whitelisted         QueryLogParamsResponseStatus = "whitelisted"
)

// AccessList Client and host access list.  Each of the lists should contain only unique elements.  In addition, allowed and disallowed lists cannot contain the same elements.
type AccessList struct {
	// AllowedClients The allowlist of clients: IP addresses, CIDRs, or ClientIDs.
	AllowedClients *[]string `json:"allowed_clients,omitempty"`

	// BlockedHosts The blocklist of hosts.
	BlockedHosts *[]string `json:"blocked_hosts,omitempty"`

	// DisallowedClients The blocklist of clients: IP addresses, CIDRs, or ClientIDs.
	DisallowedClients *[]string `json:"disallowed_clients,omitempty"`
}

// AccessListResponse Client and host access list.  Each of the lists should contain only unique elements.  In addition, allowed and disallowed lists cannot contain the same elements.
type AccessListResponse = AccessList

// AccessSetRequest Client and host access list.  Each of the lists should contain only unique elements.  In addition, allowed and disallowed lists cannot contain the same elements.
type AccessSetRequest = AccessList

// AddUrlRequest /add_url request data
type AddUrlRequest struct {
	Name *string `json:"name,omitempty"`

	// Url URL or an absolute path to the file containing filtering rules.
	Url       *string `json:"url,omitempty"`
	Whitelist *bool   `json:"whitelist,omitempty"`
}

// AddressInfo Port information
type AddressInfo struct {
	Ip   string `json:"ip"`
	Port uint16 `json:"port"`
}

// AddressesInfo AdGuard Home addresses configuration
type AddressesInfo struct {
	DnsPort uint16 `json:"dns_port"`

	// Interfaces Network interfaces dictionary, keys are interface names.
	Interfaces NetInterfaces `json:"interfaces"`
	Version    string        `json:"version"`
	WebPort    uint16        `json:"web_port"`
}

// BlockedService defines model for BlockedService.
type BlockedService struct {
	// IconSvg The SVG icon as a Base64-encoded string to make it easier to embed it into a data URL.
	IconSvg string `json:"icon_svg"`

	// Id The ID of this service.
	Id string `json:"id"`

	// Name The human-readable name of this service.
	Name string `json:"name"`

	// Rules The array of the filtering rules.
	Rules []string `json:"rules"`
}

// BlockedServicesAll defines model for BlockedServicesAll.
type BlockedServicesAll struct {
	BlockedServices []BlockedService `json:"blocked_services"`
}

// BlockedServicesArray defines model for BlockedServicesArray.
type BlockedServicesArray = []string

// CheckConfigRequest Configuration to be checked
type CheckConfigRequest struct {
	Dns         *CheckConfigRequestInfo `json:"dns,omitempty"`
	SetStaticIp *bool                   `json:"set_static_ip,omitempty"`
	Web         *CheckConfigRequestInfo `json:"web,omitempty"`
}

// CheckConfigRequestInfo defines model for CheckConfigRequestInfo.
type CheckConfigRequestInfo struct {
	Autofix *bool   `json:"autofix,omitempty"`
	Ip      *string `json:"ip,omitempty"`
	Port    *uint16 `json:"port,omitempty"`
}

// CheckConfigResponse defines model for CheckConfigResponse.
type CheckConfigResponse struct {
	Dns      CheckConfigResponseInfo `json:"dns"`
	StaticIp CheckConfigStaticIpInfo `json:"static_ip"`
	Web      CheckConfigResponseInfo `json:"web"`
}

// CheckConfigResponseInfo defines model for CheckConfigResponseInfo.
type CheckConfigResponseInfo struct {
	CanAutofix bool   `json:"can_autofix"`
	Status     string `json:"status"`
}

// CheckConfigStaticIpInfo defines model for CheckConfigStaticIpInfo.
type CheckConfigStaticIpInfo struct {
	// Error Error text. Set if static=error
	Error *string `json:"error,omitempty"`

	// Ip Current dynamic IP address. Set if static=no
	Ip *string `json:"ip,omitempty"`

	// Static Can be: yes, no, error
	Static *CheckConfigStaticIpInfoStatic `json:"static,omitempty"`
}

// CheckConfigStaticIpInfoStatic Can be: yes, no, error
type CheckConfigStaticIpInfoStatic string

// Client Client information.
type Client struct {
	BlockedServices  *[]string `json:"blocked_services,omitempty"`
	FilteringEnabled *bool     `json:"filtering_enabled,omitempty"`

	// Ids IP, CIDR, MAC, or ClientID.
	Ids *[]string `json:"ids,omitempty"`

	// IgnoreQuerylog NOTE: If `ignore_querylog` is not set in HTTP API `GET /clients/add`
	// request then default value (false) will be used.
	//
	// If `ignore_querylog` is not set in HTTP API `GET /clients/update`
	// request then the existing value will not be changed.
	//
	// This behaviour can be changed in the future versions.
	IgnoreQuerylog *bool `json:"ignore_querylog,omitempty"`

	// IgnoreStatistics NOTE: If `ignore_statistics` is not set in HTTP API `GET
	// /clients/add` request then default value (false) will be used.
	//
	// If `ignore_statistics` is not set in HTTP API `GET /clients/update`
	// request then the existing value will not be changed.
	//
	// This behaviour can be changed in the future versions.
	IgnoreStatistics *bool `json:"ignore_statistics,omitempty"`

	// Name Name
	Name            *string `json:"name,omitempty"`
	ParentalEnabled *bool   `json:"parental_enabled,omitempty"`

	// SafeSearch Safe search settings.
	SafeSearch          *SafeSearchConfig `json:"safe_search,omitempty"`
	SafebrowsingEnabled *bool             `json:"safebrowsing_enabled,omitempty"`
	// Deprecated:
	SafesearchEnabled        *bool     `json:"safesearch_enabled,omitempty"`
	Tags                     *[]string `json:"tags,omitempty"`
	Upstreams                *[]string `json:"upstreams,omitempty"`
	UseGlobalBlockedServices *bool     `json:"use_global_blocked_services,omitempty"`
	UseGlobalSettings        *bool     `json:"use_global_settings,omitempty"`
}

// ClientAuto Auto-Client information
type ClientAuto struct {
	// Ip IP address
	Ip *string `json:"ip,omitempty"`

	// Name Name
	Name *string `json:"name,omitempty"`

	// Source The source of this information
	Source    *string    `json:"source,omitempty"`
	WhoisInfo *WhoisInfo `json:"whois_info,omitempty"`
}

// ClientDelete Client delete request
type ClientDelete struct {
	Name *string `json:"name,omitempty"`
}

// ClientFindSubEntry Client information.
type ClientFindSubEntry struct {
	BlockedServices *[]string `json:"blocked_services,omitempty"`

	// Disallowed Whether the client's IP is blocked or not.
	Disallowed *bool `json:"disallowed,omitempty"`

	// DisallowedRule The rule due to which the client is disallowed.  If disallowed is set to true, and this string is empty, then the client IP is disallowed by the "allowed IP list", that is it is not included in the allowed list.
	DisallowedRule   *string `json:"disallowed_rule,omitempty"`
	FilteringEnabled *bool   `json:"filtering_enabled,omitempty"`

	// Ids IP, CIDR, MAC, or ClientID.
	Ids              *[]string `json:"ids,omitempty"`
	IgnoreQuerylog   *bool     `json:"ignore_querylog,omitempty"`
	IgnoreStatistics *bool     `json:"ignore_statistics,omitempty"`

	// Name Name
	Name            *string `json:"name,omitempty"`
	ParentalEnabled *bool   `json:"parental_enabled,omitempty"`

	// SafeSearch Safe search settings.
	SafeSearch          *SafeSearchConfig `json:"safe_search,omitempty"`
	SafebrowsingEnabled *bool             `json:"safebrowsing_enabled,omitempty"`
	// Deprecated:
	SafesearchEnabled        *bool      `json:"safesearch_enabled,omitempty"`
	Upstreams                *[]string  `json:"upstreams,omitempty"`
	UseGlobalBlockedServices *bool      `json:"use_global_blocked_services,omitempty"`
	UseGlobalSettings        *bool      `json:"use_global_settings,omitempty"`
	WhoisInfo                *WhoisInfo `json:"whois_info,omitempty"`
}

// ClientUpdate Client update request
type ClientUpdate struct {
	// Data Client information.
	Data *Client `json:"data,omitempty"`
	Name *string `json:"name,omitempty"`
}

// Clients defines model for Clients.
type Clients struct {
	// AutoClients Auto-Clients array
	AutoClients *ClientsAutoArray `json:"auto_clients,omitempty"`

	// Clients Clients array
	Clients       *ClientsArray `json:"clients,omitempty"`
	SupportedTags *[]string     `json:"supported_tags,omitempty"`
}

// ClientsArray Clients array
type ClientsArray = []Client

// ClientsAutoArray Auto-Clients array
type ClientsAutoArray = []ClientAuto

// ClientsFindEntry defines model for ClientsFindEntry.
type ClientsFindEntry map[string]ClientFindSubEntry

// ClientsFindResponse Client search results.
type ClientsFindResponse = []ClientsFindEntry

// DNSConfig DNS server configuration
type DNSConfig struct {
	BlockingIpv4 *string                `json:"blocking_ipv4,omitempty"`
	BlockingIpv6 *string                `json:"blocking_ipv6,omitempty"`
	BlockingMode *DNSConfigBlockingMode `json:"blocking_mode,omitempty"`

	// BootstrapDns Bootstrap servers, port is optional after colon.  Empty value will reset it to default values.
	BootstrapDns    *[]string `json:"bootstrap_dns,omitempty"`
	CacheOptimistic *bool     `json:"cache_optimistic,omitempty"`
	CacheSize       *int      `json:"cache_size,omitempty"`
	CacheTtlMax     *int      `json:"cache_ttl_max,omitempty"`
	CacheTtlMin     *int      `json:"cache_ttl_min,omitempty"`
	DisableIpv6     *bool     `json:"disable_ipv6,omitempty"`
	DnssecEnabled   *bool     `json:"dnssec_enabled,omitempty"`
	EdnsCsCustomIp  *string   `json:"edns_cs_custom_ip,omitempty"`
	EdnsCsEnabled   *bool     `json:"edns_cs_enabled,omitempty"`
	EdnsCsUseCustom *bool     `json:"edns_cs_use_custom,omitempty"`

	// LocalPtrUpstreams Upstream servers, port is optional after colon.  Empty value will reset it to default values.
	LocalPtrUpstreams *[]string `json:"local_ptr_upstreams,omitempty"`

	// ProtectionDisabledUntil Protection is pause until this time.  Nullable.
	ProtectionDisabledUntil *string `json:"protection_disabled_until,omitempty"`
	ProtectionEnabled       *bool   `json:"protection_enabled,omitempty"`
	Ratelimit               *int    `json:"ratelimit,omitempty"`
	ResolveClients          *bool   `json:"resolve_clients,omitempty"`

	// UpstreamDns Upstream servers, port is optional after colon.  Empty value will reset it to default values.
	UpstreamDns            *[]string    `json:"upstream_dns,omitempty"`
	UpstreamDnsFile        *string      `json:"upstream_dns_file,omitempty"`
	UpstreamMode           *interface{} `json:"upstream_mode,omitempty"`
	UsePrivatePtrResolvers *bool        `json:"use_private_ptr_resolvers,omitempty"`
}

// DNSConfigBlockingMode defines model for DNSConfig.BlockingMode.
type DNSConfigBlockingMode string

// DhcpConfig defines model for DhcpConfig.
type DhcpConfig struct {
	Enabled       *bool         `json:"enabled,omitempty"`
	InterfaceName *string       `json:"interface_name,omitempty"`
	V4            *DhcpConfigV4 `json:"v4,omitempty"`
	V6            *DhcpConfigV6 `json:"v6,omitempty"`
}

// DhcpConfigV4 defines model for DhcpConfigV4.
type DhcpConfigV4 struct {
	GatewayIp     *string `json:"gateway_ip,omitempty"`
	LeaseDuration *int    `json:"lease_duration,omitempty"`
	RangeEnd      *string `json:"range_end,omitempty"`
	RangeStart    *string `json:"range_start,omitempty"`
	SubnetMask    *string `json:"subnet_mask,omitempty"`
}

// DhcpConfigV6 defines model for DhcpConfigV6.
type DhcpConfigV6 struct {
	LeaseDuration *int    `json:"lease_duration,omitempty"`
	RangeStart    *string `json:"range_start,omitempty"`
}

// DhcpFindActiveReq Request for checking for other DHCP servers in the network.
type DhcpFindActiveReq struct {
	// Interface The name of the network interface
	Interface *string `json:"interface,omitempty"`
}

// DhcpLease DHCP lease information
type DhcpLease struct {
	Expires  string `json:"expires"`
	Hostname string `json:"hostname"`
	Ip       string `json:"ip"`
	Mac      string `json:"mac"`
}

// DhcpSearchResult Information about a DHCP server discovered in the current network.
type DhcpSearchResult struct {
	V4 *DhcpSearchV4 `json:"v4,omitempty"`
	V6 *DhcpSearchV6 `json:"v6,omitempty"`
}

// DhcpSearchResultOtherServer defines model for DhcpSearchResultOtherServer.
type DhcpSearchResultOtherServer struct {
	// Error Set if found=error
	Error *string `json:"error,omitempty"`

	// Found The result of searching the other DHCP server.
	Found *DhcpSearchResultOtherServerFound `json:"found,omitempty"`
}

// DhcpSearchResultOtherServerFound The result of searching the other DHCP server.
type DhcpSearchResultOtherServerFound string

// DhcpSearchResultStaticIP defines model for DhcpSearchResultStaticIP.
type DhcpSearchResultStaticIP struct {
	// Ip Set if static=no
	Ip *string `json:"ip,omitempty"`

	// Static The result of determining static IP address.
	Static *DhcpSearchResultStaticIPStatic `json:"static,omitempty"`
}

// DhcpSearchResultStaticIPStatic The result of determining static IP address.
type DhcpSearchResultStaticIPStatic string

// DhcpSearchV4 defines model for DhcpSearchV4.
type DhcpSearchV4 struct {
	OtherServer *DhcpSearchResultOtherServer `json:"other_server,omitempty"`
	StaticIp    *DhcpSearchResultStaticIP    `json:"static_ip,omitempty"`
}

// DhcpSearchV6 defines model for DhcpSearchV6.
type DhcpSearchV6 struct {
	OtherServer *DhcpSearchResultOtherServer `json:"other_server,omitempty"`
}

// DhcpStaticLease DHCP static lease information
type DhcpStaticLease struct {
	Hostname string `json:"hostname"`
	Ip       string `json:"ip"`
	Mac      string `json:"mac"`
}

// DhcpStatus Built-in DHCP server configuration and status
type DhcpStatus struct {
	Enabled       *bool              `json:"enabled,omitempty"`
	InterfaceName *string            `json:"interface_name,omitempty"`
	Leases        []DhcpLease        `json:"leases"`
	StaticLeases  *[]DhcpStaticLease `json:"static_leases,omitempty"`
	V4            *DhcpConfigV4      `json:"v4,omitempty"`
	V6            *DhcpConfigV6      `json:"v6,omitempty"`
}

// DnsAnswer DNS answer section
type DnsAnswer struct {
	Ttl   *uint32 `json:"ttl,omitempty"`
	Type  *string `json:"type,omitempty"`
	Value *string `json:"value,omitempty"`
}

// DnsQuestion DNS question section
type DnsQuestion struct {
	Class       *string `json:"class,omitempty"`
	Name        *string `json:"name,omitempty"`
	Type        *string `json:"type,omitempty"`
	UnicodeName *string `json:"unicode_name,omitempty"`
}

// Error A generic JSON error response.
type Error struct {
	// Message The error message, an opaque string.
	Message *string `json:"message,omitempty"`
}

// Filter Filter subscription info
type Filter struct {
	Enabled     bool       `json:"enabled"`
	Id          int64      `json:"id"`
	LastUpdated *time.Time `json:"last_updated,omitempty"`
	Name        string     `json:"name"`
	RulesCount  uint32     `json:"rules_count"`
	Url         string     `json:"url"`
}

// FilterCheckHostResponse Check Host Result
type FilterCheckHostResponse struct {
	// Cname Set if reason=Rewrite
	Cname *string `json:"cname,omitempty"`

	// FilterId In case if there's a rule applied to this DNS request, this is ID of the filter list that the rule belongs to.
	// Deprecated: use `rules[*].filter_list_id` instead.
	// Deprecated:
	FilterId *int `json:"filter_id,omitempty"`

	// IpAddrs Set if reason=Rewrite
	IpAddrs *[]string `json:"ip_addrs,omitempty"`

	// Reason Request filtering status.
	Reason *FilterCheckHostResponseReason `json:"reason,omitempty"`

	// Rule Filtering rule applied to the request (if any).
	// Deprecated: use `rules[*].text` instead.
	// Deprecated:
	Rule *string `json:"rule,omitempty"`

	// Rules Applied rules.
	Rules *[]ResultRule `json:"rules,omitempty"`

	// ServiceName Set if reason=FilteredBlockedService
	ServiceName *string `json:"service_name,omitempty"`
}

// FilterCheckHostResponseReason Request filtering status.
type FilterCheckHostResponseReason string

// FilterConfig Filtering settings
type FilterConfig struct {
	Enabled  *bool `json:"enabled,omitempty"`
	Interval *int  `json:"interval,omitempty"`
}

// FilterRefreshRequest Refresh Filters request data
type FilterRefreshRequest struct {
	Whitelist *bool `json:"whitelist,omitempty"`
}

// FilterRefreshResponse /filtering/refresh response data
type FilterRefreshResponse struct {
	Updated *int `json:"updated,omitempty"`
}

// FilterSetUrl Filtering URL settings
type FilterSetUrl struct {
	// Data Filter update data
	Data      *FilterSetUrlData `json:"data,omitempty"`
	Url       *string           `json:"url,omitempty"`
	Whitelist *bool             `json:"whitelist,omitempty"`
}

// FilterSetUrlData Filter update data
type FilterSetUrlData struct {
	Enabled bool   `json:"enabled"`
	Name    string `json:"name"`
	Url     string `json:"url"`
}

// FilterStatus Filtering settings
type FilterStatus struct {
	Enabled          *bool     `json:"enabled,omitempty"`
	Filters          *[]Filter `json:"filters,omitempty"`
	Interval         *int      `json:"interval,omitempty"`
	UserRules        *[]string `json:"user_rules,omitempty"`
	WhitelistFilters *[]Filter `json:"whitelist_filters,omitempty"`
}

// GetQueryLogConfigResponse Query log configuration
type GetQueryLogConfigResponse struct {
	// AnonymizeClientIp Anonymize clients' IP addresses
	AnonymizeClientIp bool `json:"anonymize_client_ip"`

	// Enabled Is query log enabled
	Enabled bool `json:"enabled"`

	// Ignored List of host names, which should not be written to log
	Ignored []string `json:"ignored"`

	// Interval Time period for query log rotation in milliseconds.
	Interval float32 `json:"interval"`
}

// GetStatsConfigResponse Statistics configuration
type GetStatsConfigResponse struct {
	// Enabled Are statistics enabled
	Enabled bool `json:"enabled"`

	// Ignored List of host names, which should not be counted
	Ignored []string `json:"ignored"`

	// Interval Statistics rotation interval in milliseconds
	Interval float32 `json:"interval"`
}

// GetVersionRequest /version.json request data
type GetVersionRequest struct {
	// RecheckNow If false, server will check for a new version data only once in several hours.
	RecheckNow *bool `json:"recheck_now,omitempty"`
}

// InitialConfiguration AdGuard Home initial configuration for the first-install wizard.
type InitialConfiguration struct {
	// Dns Port information
	Dns AddressInfo `json:"dns"`

	// Password Basic auth password
	Password string `json:"password"`

	// Username Basic auth username
	Username string `json:"username"`

	// Web Port information
	Web AddressInfo `json:"web"`
}

// LanguageSettings Language settings object.
type LanguageSettings struct {
	// Language The current language or the language to set.
	Language string `json:"language"`
}

// Login Login request data
type Login struct {
	// Name User name
	Name *string `json:"name,omitempty"`

	// Password Password
	Password *string `json:"password,omitempty"`
}

// NetInterface Network interface info
type NetInterface struct {
	// Flags Flags could be any combination of the following values, divided by the "|" character: "up", "broadcast", "loopback", "pointtopoint" and "multicast".
	Flags           string    `json:"flags"`
	HardwareAddress string    `json:"hardware_address"`
	IpAddresses     *[]string `json:"ip_addresses,omitempty"`
	Mtu             int       `json:"mtu"`
	Name            string    `json:"name"`
}

// NetInterfaces Network interfaces dictionary, keys are interface names.
type NetInterfaces map[string]NetInterface

// ProfileInfo Information about the current user
type ProfileInfo struct {
	Language string `json:"language"`
	Name     string `json:"name"`

	// Theme Interface theme
	Theme ProfileInfoTheme `json:"theme"`
}

// ProfileInfoTheme Interface theme
type ProfileInfoTheme string

// PutQueryLogConfigUpdateRequest Query log configuration
type PutQueryLogConfigUpdateRequest = GetQueryLogConfigResponse

// PutStatsConfigUpdateRequest Statistics configuration
type PutStatsConfigUpdateRequest = GetStatsConfigResponse

// QueryLog Query log
type QueryLog struct {
	Data   *[]QueryLogItem `json:"data,omitempty"`
	Oldest *string         `json:"oldest,omitempty"`
}

// QueryLogConfig Query log configuration
type QueryLogConfig struct {
	// AnonymizeClientIp Anonymize clients' IP addresses
	AnonymizeClientIp *bool `json:"anonymize_client_ip,omitempty"`

	// Enabled Is query log enabled
	Enabled *bool `json:"enabled,omitempty"`

	// Interval Time period for query log rotation.
	Interval *QueryLogConfigInterval `json:"interval,omitempty"`
}

// QueryLogConfigInterval Time period for query log rotation.
type QueryLogConfigInterval float32

// QueryLogItem Query log item
type QueryLogItem struct {
	Answer *[]DnsAnswer `json:"answer,omitempty"`

	// AnswerDnssec If true, the response had the Authenticated Data (AD) flag set.
	AnswerDnssec *bool `json:"answer_dnssec,omitempty"`

	// Cached Defines if the response has been served from cache.
	Cached *bool `json:"cached,omitempty"`

	// Client The client's IP address.
	Client *string `json:"client,omitempty"`

	// ClientId The ClientID, if provided in DoH, DoQ, or DoT.
	ClientId *string `json:"client_id,omitempty"`

	// ClientInfo Client information for a query log item.
	ClientInfo  *QueryLogItemClient `json:"client_info,omitempty"`
	ClientProto *interface{}        `json:"client_proto,omitempty"`

	// Ecs The IP network defined by an EDNS Client-Subnet option in the request message if any.
	Ecs       *string `json:"ecs,omitempty"`
	ElapsedMs *string `json:"elapsedMs,omitempty"`

	// FilterId In case if there's a rule applied to this DNS request, this is ID of the filter list that the rule belongs to.
	// Deprecated: use `rules[*].filter_list_id` instead.
	// Deprecated:
	FilterId *int `json:"filterId,omitempty"`

	// OriginalAnswer Answer from upstream server (optional)
	OriginalAnswer *[]DnsAnswer `json:"original_answer,omitempty"`

	// Question DNS question section
	Question *DnsQuestion `json:"question,omitempty"`

	// Reason Request filtering status.
	Reason *QueryLogItemReason `json:"reason,omitempty"`

	// Rule Filtering rule applied to the request (if any).
	// Deprecated: use `rules[*].text` instead.
	// Deprecated:
	Rule *string `json:"rule,omitempty"`

	// Rules Applied rules.
	Rules *[]ResultRule `json:"rules,omitempty"`

	// ServiceName Set if reason=FilteredBlockedService
	ServiceName *string `json:"service_name,omitempty"`

	// Status DNS response status
	Status *string `json:"status,omitempty"`

	// Time DNS request processing start time
	Time *string `json:"time,omitempty"`

	// Upstream Upstream URL starting with tcp://, tls://, https://, or with an IP address.
	Upstream *string `json:"upstream,omitempty"`
}

// QueryLogItemReason Request filtering status.
type QueryLogItemReason string

// QueryLogItemClient Client information for a query log item.
type QueryLogItemClient struct {
	// Disallowed Whether the client's IP is blocked or not.
	Disallowed bool `json:"disallowed"`

	// DisallowedRule The rule due to which the client is allowed or blocked.
	DisallowedRule string `json:"disallowed_rule"`

	// Name Persistent client's name or runtime client's hostname.  May be empty.
	Name string `json:"name"`

	// Whois Client WHOIS information, if any.
	Whois QueryLogItemClientWhois `json:"whois"`
}

// QueryLogItemClientWhois Client WHOIS information, if any.
type QueryLogItemClientWhois struct {
	// City City, if any.
	City *string `json:"city,omitempty"`

	// Country Country, if any.
	Country *string `json:"country,omitempty"`

	// Orgname Organization name, if any.
	Orgname *string `json:"orgname,omitempty"`
}

// RemoveUrlRequest /remove_url request data
type RemoveUrlRequest struct {
	// Url Previously added URL containing filtering rules
	Url       *string `json:"url,omitempty"`
	Whitelist *bool   `json:"whitelist,omitempty"`
}

// ResultRule Applied rule.
type ResultRule struct {
	// FilterListId In case if there's a rule applied to this DNS request, this is ID of the filter list that the rule belongs to.
	FilterListId *int64 `json:"filter_list_id,omitempty"`

	// Text The text of the filtering rule applied to the request (if any).
	Text *string `json:"text,omitempty"`
}

// RewriteEntry Rewrite rule
type RewriteEntry struct {
	// Answer value of A, AAAA or CNAME DNS record
	Answer *string `json:"answer,omitempty"`

	// Domain Domain name
	Domain *string `json:"domain,omitempty"`
}

// RewriteList Rewrite rules array
type RewriteList = []RewriteEntry

// RewriteUpdate Rewrite rule update object
type RewriteUpdate struct {
	// Target Rewrite rule
	Target *RewriteEntry `json:"target,omitempty"`

	// Update Rewrite rule
	Update *RewriteEntry `json:"update,omitempty"`
}

// SafeSearchConfig Safe search settings.
type SafeSearchConfig struct {
	Bing       *bool `json:"bing,omitempty"`
	Duckduckgo *bool `json:"duckduckgo,omitempty"`
	Enabled    *bool `json:"enabled,omitempty"`
	Google     *bool `json:"google,omitempty"`
	Pixabay    *bool `json:"pixabay,omitempty"`
	Yandex     *bool `json:"yandex,omitempty"`
	Youtube    *bool `json:"youtube,omitempty"`
}

// ServerStatus AdGuard Home server status and configuration
type ServerStatus struct {
	DhcpAvailable              *bool    `json:"dhcp_available,omitempty"`
	DnsAddresses               []string `json:"dns_addresses"`
	DnsPort                    uint16   `json:"dns_port"`
	HttpPort                   uint16   `json:"http_port"`
	Language                   string   `json:"language"`
	ProtectionDisabledDuration *int64   `json:"protection_disabled_duration,omitempty"`
	ProtectionEnabled          bool     `json:"protection_enabled"`
	Running                    bool     `json:"running"`
	Version                    string   `json:"version"`
}

// SetProtectionRequest Protection state configuration
type SetProtectionRequest struct {
	// Duration Duration of a pause, in milliseconds.  Enabled should be false.
	Duration *uint64 `json:"duration,omitempty"`
	Enabled  bool    `json:"enabled"`
}

// SetRulesRequest Custom filtering rules setting request.
type SetRulesRequest struct {
	Rules *[]string `json:"rules,omitempty"`
}

// Stats Server statistics data
type Stats struct {
	// AvgProcessingTime Average time in milliseconds on processing a DNS
	AvgProcessingTime *float32 `json:"avg_processing_time,omitempty"`
	BlockedFiltering  *[]int   `json:"blocked_filtering,omitempty"`
	DnsQueries        *[]int   `json:"dns_queries,omitempty"`

	// NumBlockedFiltering Number of requests blocked by filtering rules
	NumBlockedFiltering *int `json:"num_blocked_filtering,omitempty"`

	// NumDnsQueries Total number of DNS queries
	NumDnsQueries *int `json:"num_dns_queries,omitempty"`

	// NumReplacedParental Number of blocked adult websites
	NumReplacedParental *int `json:"num_replaced_parental,omitempty"`

	// NumReplacedSafebrowsing Number of requests blocked by safebrowsing module
	NumReplacedSafebrowsing *int `json:"num_replaced_safebrowsing,omitempty"`

	// NumReplacedSafesearch Number of requests blocked by safesearch module
	NumReplacedSafesearch *int   `json:"num_replaced_safesearch,omitempty"`
	ReplacedParental      *[]int `json:"replaced_parental,omitempty"`
	ReplacedSafebrowsing  *[]int `json:"replaced_safebrowsing,omitempty"`

	// TimeUnits Time units
	TimeUnits         *StatsTimeUnits  `json:"time_units,omitempty"`
	TopBlockedDomains *[]TopArrayEntry `json:"top_blocked_domains,omitempty"`
	TopClients        *[]TopArrayEntry `json:"top_clients,omitempty"`
	TopQueriedDomains *[]TopArrayEntry `json:"top_queried_domains,omitempty"`
}

// StatsTimeUnits Time units
type StatsTimeUnits string

// StatsConfig Statistics configuration
type StatsConfig struct {
	// Interval Time period to keep the data.  `0` means that the statistics is disabled.
	Interval *StatsConfigInterval `json:"interval,omitempty"`
}

// StatsConfigInterval Time period to keep the data.  `0` means that the statistics is disabled.
type StatsConfigInterval int

// TlsConfig TLS configuration settings and status
type TlsConfig struct {
	// CertificateChain Base64 string with PEM-encoded certificates chain
	CertificateChain *string `json:"certificate_chain,omitempty"`

	// CertificatePath Path to certificate file
	CertificatePath *string `json:"certificate_path,omitempty"`

	// DnsNames The value of SubjectAltNames field of the first certificate in the chain.
	DnsNames *[]string `json:"dns_names,omitempty"`

	// Enabled enabled is the encryption (DoT/DoH/HTTPS) status
	Enabled *bool `json:"enabled,omitempty"`

	// ForceHttps if true, forces HTTP->HTTPS redirect
	ForceHttps *bool `json:"force_https,omitempty"`

	// Issuer The issuer of the first certificate in the chain.
	Issuer *string `json:"issuer,omitempty"`

	// KeyType Key type.
	KeyType *TlsConfigKeyType `json:"key_type,omitempty"`

	// NotAfter The NotAfter field of the first certificate in the chain.
	NotAfter *string `json:"not_after,omitempty"`

	// NotBefore The NotBefore field of the first certificate in the chain.
	NotBefore *string `json:"not_before,omitempty"`

	// PortDnsOverQuic DNS-over-QUIC port. If 0, DoQ will be disabled.
	PortDnsOverQuic *uint16 `json:"port_dns_over_quic,omitempty"`

	// PortDnsOverTls DNS-over-TLS port. If 0, DoT will be disabled.
	PortDnsOverTls *uint16 `json:"port_dns_over_tls,omitempty"`

	// PortHttps HTTPS port. If 0, HTTPS will be disabled.
	PortHttps *uint16 `json:"port_https,omitempty"`

	// PrivateKey Base64 string with PEM-encoded private key
	PrivateKey *string `json:"private_key,omitempty"`

	// PrivateKeyPath Path to private key file
	PrivateKeyPath *string `json:"private_key_path,omitempty"`

	// PrivateKeySaved Set to true if the user has previously saved a private key as a string.  This is used so that the server and the client don't have to send the private key between each other every time, which might lead to security issues.
	PrivateKeySaved *bool `json:"private_key_saved,omitempty"`

	// ServerName server_name is the hostname of your HTTPS/TLS server
	ServerName *string `json:"server_name,omitempty"`

	// Subject The subject of the first certificate in the chain.
	Subject *string `json:"subject,omitempty"`

	// ValidCert Set to true if the specified certificates chain is a valid chain of X509 certificates.
	ValidCert *bool `json:"valid_cert,omitempty"`

	// ValidChain Set to true if the specified certificates chain is verified and issued by a known CA.
	ValidChain *bool `json:"valid_chain,omitempty"`

	// ValidKey Set to true if the key is a valid private key.
	ValidKey *bool `json:"valid_key,omitempty"`

	// ValidPair Set to true if both certificate and private key are correct.
	ValidPair *bool `json:"valid_pair,omitempty"`

	// WarningValidation A validation warning message with the issue description.
	WarningValidation *string `json:"warning_validation,omitempty"`
}

// TlsConfigKeyType Key type.
type TlsConfigKeyType string

// TopArrayEntry Represent the number of hits per key (domain or client IP).
type TopArrayEntry struct {
	DomainOrIp           *int           `json:"domain_or_ip,omitempty"`
	AdditionalProperties map[string]int `json:"-"`
}

// UpstreamsConfig Upstreams configuration
type UpstreamsConfig struct {
	// BootstrapDns Bootstrap servers, port is optional after colon.  Empty value will reset it to default values.
	BootstrapDns []string `json:"bootstrap_dns"`

	// PrivateUpstream Local PTR resolvers, port is optional after colon.  Empty value will reset it to default values.
	PrivateUpstream *[]string `json:"private_upstream,omitempty"`

	// UpstreamDns Upstream servers, port is optional after colon.  Empty value will reset it to default values.
	UpstreamDns []string `json:"upstream_dns"`
}

// UpstreamsConfigResponse Upstreams configuration response
type UpstreamsConfigResponse map[string]string

// VersionInfo Information about the latest available version of AdGuard Home.
type VersionInfo struct {
	Announcement    *string `json:"announcement,omitempty"`
	AnnouncementUrl *string `json:"announcement_url,omitempty"`
	CanAutoupdate   *bool   `json:"can_autoupdate,omitempty"`

	// Disabled If true then other fields doesn't appear.
	Disabled   bool    `json:"disabled"`
	NewVersion *string `json:"new_version,omitempty"`
}

// WhoisInfo defines model for WhoisInfo.
type WhoisInfo map[string]string

// DhcpStaticLeaseBody DHCP static lease information
type DhcpStaticLeaseBody = DhcpStaticLease

// RewriteEntryBody Rewrite rule
type RewriteEntryBody = RewriteEntry

// RewriteUpdateBody Rewrite rule update object
type RewriteUpdateBody = RewriteUpdate

// TlsConfigBody TLS configuration settings and status
type TlsConfigBody = TlsConfig

// MobileConfigDoHParams defines parameters for MobileConfigDoH.
type MobileConfigDoHParams struct {
	// Host Host for which the config is generated.  If no host is provided, `tls.server_name` from the configuration file is used.  If `tls.server_name` is not set, the API returns an error with a 500 status.
	Host string `form:"host" json:"host"`

	// ClientId ClientID.
	ClientId *string `form:"client_id,omitempty" json:"client_id,omitempty"`
}

// MobileConfigDoTParams defines parameters for MobileConfigDoT.
type MobileConfigDoTParams struct {
	// Host Host for which the config is generated.  If no host is provided, `tls.server_name` from the configuration file is used.  If `tls.server_name` is not set, the API returns an error with a 500 status.
	Host string `form:"host" json:"host"`

	// ClientId ClientID.
	ClientId *string `form:"client_id,omitempty" json:"client_id,omitempty"`
}

// ClientsFindParams defines parameters for ClientsFind.
type ClientsFindParams struct {
	// Ip0 Filter by IP address or ClientIDs.  Parameters with names `ip1`, `ip2`, and so on are also accepted and interpreted as "ip0 OR ip1 OR ip2".
	// TODO(a.garipov): Replace with a better query API.
	Ip0 *string `form:"ip0,omitempty" json:"ip0,omitempty"`
}

// FilteringCheckHostParams defines parameters for FilteringCheckHost.
type FilteringCheckHostParams struct {
	// Name Filter by host name
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// QueryLogParams defines parameters for QueryLog.
type QueryLogParams struct {
	// OlderThan Filter by older than
	OlderThan *string `form:"older_than,omitempty" json:"older_than,omitempty"`

	// Offset Specify the ranking number of the first item on the page.  Even though it is possible to use "offset" and "older_than", we recommend choosing one of them and sticking to it.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Limit the number of records to be returned
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Search Filter by domain name or client IP
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// ResponseStatus Filter by response status
	ResponseStatus *QueryLogParamsResponseStatus `form:"response_status,omitempty" json:"response_status,omitempty"`
}

// QueryLogParamsResponseStatus defines parameters for QueryLog.
type QueryLogParamsResponseStatus string

// AccessSetJSONRequestBody defines body for AccessSet for application/json ContentType.
type AccessSetJSONRequestBody = AccessSetRequest

// BlockedServicesSetJSONRequestBody defines body for BlockedServicesSet for application/json ContentType.
type BlockedServicesSetJSONRequestBody = BlockedServicesArray

// ClientsAddJSONRequestBody defines body for ClientsAdd for application/json ContentType.
type ClientsAddJSONRequestBody = Client

// ClientsDeleteJSONRequestBody defines body for ClientsDelete for application/json ContentType.
type ClientsDeleteJSONRequestBody = ClientDelete

// ClientsUpdateJSONRequestBody defines body for ClientsUpdate for application/json ContentType.
type ClientsUpdateJSONRequestBody = ClientUpdate

// DhcpAddStaticLeaseJSONRequestBody defines body for DhcpAddStaticLease for application/json ContentType.
type DhcpAddStaticLeaseJSONRequestBody = DhcpStaticLease

// CheckActiveDhcpJSONRequestBody defines body for CheckActiveDhcp for application/json ContentType.
type CheckActiveDhcpJSONRequestBody = DhcpFindActiveReq

// DhcpRemoveStaticLeaseJSONRequestBody defines body for DhcpRemoveStaticLease for application/json ContentType.
type DhcpRemoveStaticLeaseJSONRequestBody = DhcpStaticLease

// DhcpSetConfigJSONRequestBody defines body for DhcpSetConfig for application/json ContentType.
type DhcpSetConfigJSONRequestBody = DhcpConfig

// DnsConfigJSONRequestBody defines body for DnsConfig for application/json ContentType.
type DnsConfigJSONRequestBody = DNSConfig

// FilteringAddURLJSONRequestBody defines body for FilteringAddURL for application/json ContentType.
type FilteringAddURLJSONRequestBody = AddUrlRequest

// FilteringConfigJSONRequestBody defines body for FilteringConfig for application/json ContentType.
type FilteringConfigJSONRequestBody = FilterConfig

// FilteringRefreshJSONRequestBody defines body for FilteringRefresh for application/json ContentType.
type FilteringRefreshJSONRequestBody = FilterRefreshRequest

// FilteringRemoveURLJSONRequestBody defines body for FilteringRemoveURL for application/json ContentType.
type FilteringRemoveURLJSONRequestBody = RemoveUrlRequest

// FilteringSetRulesJSONRequestBody defines body for FilteringSetRules for application/json ContentType.
type FilteringSetRulesJSONRequestBody = SetRulesRequest

// FilteringSetURLJSONRequestBody defines body for FilteringSetURL for application/json ContentType.
type FilteringSetURLJSONRequestBody = FilterSetUrl

// ChangeLanguageJSONRequestBody defines body for ChangeLanguage for application/json ContentType.
type ChangeLanguageJSONRequestBody = LanguageSettings

// InstallCheckConfigJSONRequestBody defines body for InstallCheckConfig for application/json ContentType.
type InstallCheckConfigJSONRequestBody = CheckConfigRequest

// InstallConfigureJSONRequestBody defines body for InstallConfigure for application/json ContentType.
type InstallConfigureJSONRequestBody = InitialConfiguration

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = Login

// UpdateProfileJSONRequestBody defines body for UpdateProfile for application/json ContentType.
type UpdateProfileJSONRequestBody = ProfileInfo

// SetProtectionJSONRequestBody defines body for SetProtection for application/json ContentType.
type SetProtectionJSONRequestBody = SetProtectionRequest

// PutQueryLogConfigJSONRequestBody defines body for PutQueryLogConfig for application/json ContentType.
type PutQueryLogConfigJSONRequestBody = PutQueryLogConfigUpdateRequest

// QueryLogConfigJSONRequestBody defines body for QueryLogConfig for application/json ContentType.
type QueryLogConfigJSONRequestBody = QueryLogConfig

// RewriteAddJSONRequestBody defines body for RewriteAdd for application/json ContentType.
type RewriteAddJSONRequestBody = RewriteEntry

// RewriteDeleteJSONRequestBody defines body for RewriteDelete for application/json ContentType.
type RewriteDeleteJSONRequestBody = RewriteEntry

// RewriteUpdateJSONRequestBody defines body for RewriteUpdate for application/json ContentType.
type RewriteUpdateJSONRequestBody = RewriteUpdate

// SafesearchSettingsJSONRequestBody defines body for SafesearchSettings for application/json ContentType.
type SafesearchSettingsJSONRequestBody = SafeSearchConfig

// PutStatsConfigJSONRequestBody defines body for PutStatsConfig for application/json ContentType.
type PutStatsConfigJSONRequestBody = PutStatsConfigUpdateRequest

// StatsConfigJSONRequestBody defines body for StatsConfig for application/json ContentType.
type StatsConfigJSONRequestBody = StatsConfig

// TestUpstreamDNSJSONRequestBody defines body for TestUpstreamDNS for application/json ContentType.
type TestUpstreamDNSJSONRequestBody = UpstreamsConfig

// TlsConfigureJSONRequestBody defines body for TlsConfigure for application/json ContentType.
type TlsConfigureJSONRequestBody = TlsConfig

// TlsValidateJSONRequestBody defines body for TlsValidate for application/json ContentType.
type TlsValidateJSONRequestBody = TlsConfig

// GetVersionJsonJSONRequestBody defines body for GetVersionJson for application/json ContentType.
type GetVersionJsonJSONRequestBody = GetVersionRequest

// Getter for additional properties for TopArrayEntry. Returns the specified
// element and whether it was found
func (a TopArrayEntry) Get(fieldName string) (value int, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TopArrayEntry
func (a *TopArrayEntry) Set(fieldName string, value int) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]int)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TopArrayEntry to handle AdditionalProperties
func (a *TopArrayEntry) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["domain_or_ip"]; found {
		err = json.Unmarshal(raw, &a.DomainOrIp)
		if err != nil {
			return fmt.Errorf("error reading 'domain_or_ip': %w", err)
		}
		delete(object, "domain_or_ip")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]int)
		for fieldName, fieldBuf := range object {
			var fieldVal int
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshalling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TopArrayEntry to handle AdditionalProperties
func (a TopArrayEntry) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.DomainOrIp != nil {
		object["domain_or_ip"], err = json.Marshal(a.DomainOrIp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'domain_or_ip': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
